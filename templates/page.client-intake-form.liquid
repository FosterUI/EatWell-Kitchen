{%- style -%}
.customer-form {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
}

.field {
  margin-bottom: 1.5rem;
}

.field__label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.field__input,
.field__select,
.field__textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--color-border);
  border-radius: 4px;
  background-color: var(--color-background);
}

.field__textarea {
  min-height: 100px;
  resize: vertical;
}

.checkbox-group {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1rem;
  margin-top: 0.5rem;
}

.checkbox-label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.form__success {
  background-color: var(--color-success-background);
  color: var(--color-success-text);
  padding: 1rem;
  margin-bottom: 1.5rem;
  border-radius: 4px;
}

.form__message {
  color: var(--color-error);
  margin-top: 0.5rem;
  font-size: 0.875rem;
}

.button {
  width: 100%;
  margin-top: 2rem;
}

.hidden {
  display: none;
}

.spinner {
  animation: rotate 2s linear infinite;
  width: 20px;
  height: 20px;
}

.path {
  stroke: currentColor;
  stroke-linecap: round;
  animation: dash 1.5s ease-in-out infinite;
}

@keyframes rotate {
  100% { transform: rotate(360deg); }
}

@keyframes dash {
  0% {
    stroke-dasharray: 1, 150;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -35;
  }
  100% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -124;
  }
}

.field__input.error,
.field__select.error {
  border-color: var(--color-error);
  background-color: var(--color-error-bg);
}

.error-message {
  color: var(--color-error);
  font-size: 0.875rem;
  margin-top: 0.25rem;
  display: none;
}

.field__input.error + .error-message {
  display: block;
}

/* Add styles for form feedback */
.form__success {
  background-color: var(--color-success-background);
  color: var(--color-success-text);
  padding: 1rem;
  margin-bottom: 1.5rem;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.form__error {
  background-color: var(--color-error-bg);
  color: var(--color-error);
  padding: 1rem;
  margin-bottom: 1.5rem;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
{%- endstyle -%}

<div class="customer-form page-width">
  {% form 'customer', customer, class: 'form' %}
    <div class="form__feedback" style="display: none;"></div>
    {%- if form.posted_successfully? -%}
      <div class="form__success" tabindex="-1" autofocus>
        {% render 'icon-success' %}
        {{ 'customer.intake_form.profile_updated' | t }}
      </div>
    {%- endif -%}

    {%- if form.errors -%}
      <div class="form__message" role="alert">
        {% render 'icon-error' %}
        {{ 'customer.intake_form.error_message' | t }}
      </div>
    {%- endif -%}

    <div class="field">
      <label class="field__label" for="CustomerName">{{ 'customer.intake_form.labels.name' | t }} <span aria-hidden="true">*</span></label>
      <input
        type="text"
        id="CustomerName"
        name="customer[name]"
        class="field__input"
        value="{{ customer.name }}"
        autocomplete="name"
        required
      >
    </div>

    <div class="field">
      <label class="field__label" for="CustomerEmail">{{ 'customer.intake_form.labels.email' | t }} <span aria-hidden="true">*</span></label>
      <input
        type="email"
        id="CustomerEmail"
        name="customer[email]"  
        class="field__input"
        value="{{ customer.email }}"
        spellcheck="false"
        autocomplete="email"
        aria-required="true"
        required
        {% if form.errors contains 'email' %}
          aria-invalid="true"
          aria-describedby="CustomerEmail-error"
        {% endif %}
      >
      {%- if form.errors contains 'email' -%}
        <div id="CustomerEmail-error" class="form__message">
          {% render 'icon-error' %}
          {{ form.errors.translated_fields.email | capitalize }} {{ form.errors.messages.email }}.
        </div>
      {%- endif -%}
    </div>

    <div class="field">
      <label class="field__label" for="CustomerAddress">{{ 'customer.intake_form.labels.address' | t }}</label>
      <input
        type="text"
        id="CustomerAddress"
        name="customer[note][address]"
        class="field__input"
        value="{{ customer.note | json | split: 'address":"' | last | split: '","' | first }}"
        autocomplete="street-address"
      >
    </div>

    <div class="field">
      <label class="field__label" for="CustomerPhone">{{ 'customer.intake_form.labels.phone' | t }}</label>
      <input
        type="tel"
        id="CustomerPhone"
        name="customer[phone]"
        class="field__input"
        value="{{ customer.phone }}"
        pattern="[0-9\-]*"
        autocomplete="tel"
      >
    </div>

    <div class="field">
      <label class="field__label" for="CustomerAllergies">{{ 'customer.intake_form.labels.allergies' | t }}</label>
      <textarea
        id="CustomerAllergies"
        name="customer[note][allergies]"
        class="field__textarea"
        rows="3"
      >{{ customer.note | json | split: 'allergies":"' | last | split: '","' | first }}</textarea>
    </div>

    <div class="field">
      <label class="field__label" for="CustomerDiet">{{ 'customer.intake_form.labels.dietary_restrictions' | t }}</label>
      <select id="CustomerDiet" name="customer[note][dietary]" class="field__select">
        <option value="">{{ 'customer.intake_form.dietary_options.none' | t }}</option>
        <option value="none" {% if customer.note contains '"dietary":"none"' %}selected{% endif %}>None</option>
        <option value="vegetarian" {% if customer.note contains '"dietary":"vegetarian"' %}selected{% endif %}>Vegetarian</option>
        <option value="vegan" {% if customer.note contains '"dietary":"vegan"' %}selected{% endif %}>Vegan</option>
        <option value="gluten-free" {% if customer.note contains '"dietary":"gluten-free"' %}selected{% endif %}>Gluten-Free</option>
        <option value="keto" {% if customer.note contains '"dietary":"keto"' %}selected{% endif %}>Keto</option>
      </select>
    </div>

    <div class="field">
      <label class="field__label">{{ 'customer.intake_form.labels.preferred_meal_types' | t }}</label>
      <div class="checkbox-group">
        {% assign meal_types = 'breakfast,lunch,dinner' | split: ',' %}
        {% for type in meal_types %}
          <label class="checkbox-label">
            <input
              type="checkbox"
              name="customer[note][meal_types][]"
              value="{{ type }}"
              {% if customer.note contains type %}checked{% endif %}
            >
            {{ type | capitalize }}
          </label>
        {% endfor %}
      </div>
    </div>

    <div class="field">
      <label class="field__label" for="CustomerFrequency">{{ 'customer.intake_form.labels.purchase_frequency' | t }}</label>
      <select id="CustomerFrequency" name="customer[note][frequency]" class="field__select">
        <option value="">{{ 'customer.intake_form.placeholders.select_frequency' | t }}</option>
        <option value="weekly" {% if customer.note contains '"frequency":"weekly"' %}selected{% endif %}>Weekly</option>
        <option value="biweekly" {% if customer.note contains '"frequency":"biweekly"' %}selected{% endif %}>Bi-Weekly</option>
        <option value="monthly" {% if customer.note contains '"frequency":"monthly"' %}selected{% endif %}>Monthly</option>
      </select>
    </div>

    <button type="submit" class="button button--primary" id="submitButton">
      <span class="button-text">{{ 'customer.intake_form.submit' | t }}</span>
      <span class="button-loading hidden">
        <svg class="spinner" viewBox="0 0 50 50">
          <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
        </svg>
      </span>
    </button>
  {% endform %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('.form');
  const feedbackDiv = form.querySelector('.form__feedback');
  
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Clear previous feedback
    feedbackDiv.innerHTML = '';
    feedbackDiv.style.display = 'none';
    feedbackDiv.className = 'form__feedback';
    
    // Clear previous errors
    form.querySelectorAll('.error-message').forEach(el => el.remove());
    form.querySelectorAll('.error').forEach(el => el.classList.remove('error'));

    // Validate required fields
    const requiredFields = form.querySelectorAll('[required]');
    let isValid = true;

    requiredFields.forEach(field => {
      if (!field.value.trim()) {
        isValid = false;
        field.classList.add('error');
        
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.textContent = `${field.labels[0].textContent.trim().replace(' *', '')} is required`;
        field.parentNode.appendChild(errorMessage);
      }
    });

    if (!isValid) {
      form.querySelector('.error').scrollIntoView({ behavior: 'smooth' });
      return;
    }

    const submitButton = form.querySelector('#submitButton');
    const buttonText = submitButton.querySelector('.button-text');
    const buttonLoading = submitButton.querySelector('.button-loading');

    try {
      submitButton.disabled = true;
      buttonText.classList.add('hidden');
      buttonLoading.classList.remove('hidden');

      // Prepare note data
      const noteData = {
        address: form.querySelector('[name="customer[note][address]"]').value || '',
        allergies: form.querySelector('[name="customer[note][allergies]"]').value || '',
        dietary: form.querySelector('[name="customer[note][dietary]"]').value || '',
        meal_types: Array.from(form.querySelectorAll('[name="customer[note][meal_types][]"]:checked')).map(cb => cb.value),
        frequency: form.querySelector('[name="customer[note][frequency]"]').value || '',
        updated_at: new Date().toISOString()
      };

      // Create or update hidden note input
      let noteInput = form.querySelector('input[name="customer[note]"]');
      if (!noteInput) {
        noteInput = document.createElement('input');
        noteInput.type = 'hidden';
        noteInput.name = 'customer[note]';
        form.appendChild(noteInput);
      }
      noteInput.value = JSON.stringify(noteData);

      // Submit form using fetch to handle response
      const formData = new FormData(form);
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        }
      });

      const result = await response.json();

      if (result.status === 'success') {
        feedbackDiv.innerHTML = `
          {% render 'icon-success' %}
          <span>{{ 'customer.intake_form.profile_updated' | t }}</span>
        `;
        feedbackDiv.className = 'form__success';
        feedbackDiv.style.display = 'flex';
        form.reset();
      } else {
        throw new Error(result.message || 'Submission failed');
      }

    } catch (error) {
      console.error('Form submission error:', error);
      
      feedbackDiv.innerHTML = `
        {% render 'icon-error' %}
        <span>{{ 'customer.intake_form.error_message' | t }}</span>
      `;
      feedbackDiv.className = 'form__error';
      feedbackDiv.style.display = 'flex';
    } finally {
      submitButton.disabled = false;
      buttonText.classList.remove('hidden');
      buttonLoading.classList.add('hidden');
      feedbackDiv.scrollIntoView({ behavior: 'smooth' });
    }
  });
});
</script>